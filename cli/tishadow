#!/usr/bin/env node
var
    api      = require('./support/api'),
    compiler = require('./support/compiler'),
    colors   = require('colors'),
    config   = require('./support/config'),
    pkginfo  = require('pkginfo'),
    program  = require('commander'),
    fs       = require('fs'),
    watch    = require('watch')
    ;

// check if watch enabled
var at_index = process.argv.indexOf("@");
config.isWatching = false;
if (at_index > -1) {
  config.isWatching = true;
  process.argv.splice(at_index,1);
}


pkginfo(module, 'name', 'version');

program
  .version(module.exports.version, '-v, --version')
  .description('TiShadow CLI')
  .usage('COMMAND [OPTIONS]');

program.command('server')
  .description('start the TiShadow server'.grey)
  .option('-p, --port <port>', 'server port')
  .option('-l, --long-polling', 'force long polling')
  .option('-i, --internal-ip <internal-ip>', 'internal ip to bind to')
  .option('-s, --screenshot-path <screenshot-path>', 'path to save screenshot (defaults to /tmp)')
  .option('-z, --manage-versions', 'manage and automatically update bundles')
  .action(function(env) {
    config.init(env);
    require("../server/app.js");
  });

program.command('clear')
  .description('clear the application cache on all connected devices'.grey)
  .option('-o, --host <host>', 'server host name / ip address')
  .option('-p, --port <port>', 'server port')
  .option('-r, --room <room>', 'server room')
  .option('-c, --ticaster', 'connect to ticaster')
  .option('-P, --platform <platform>', 'target platform')
  .action(api.clearCache);

program.command('run')
  .description('deploy full application to all connected devices'.grey)
  .option('-u, --update', 'only send recently changed files')
  .option('-a, --patch', 'patch updated files without causing app restart')
  .option('-l, --locale <locale>', 'set the locale in in the TiShadow app')
  .option('-j, --jshint', 'analyse code with JSHint')
  .option('-t, --tail-logs', 'tail server logs on deploy')
  .option('-o, --host <host>', 'server host name / ip address')
  .option('-p, --port <port>', 'server port')
  .option('-r, --room <room>', 'server room')
  .option('-c, --ticaster', 'connect to ticaster')
  .option('-P, --platform <platform>', 'target platform')
  .option('-f, --forceUpdate', 'indicate that this update should be forcefully applied when received by a device')
  .action(compiler);

program.command('deploy')
  .description('deploy full application to the server without pushing'.grey)
  .option('-o, --host <host>', 'server host name / ip address')
  .option('-p, --port <port>', 'server port')
  .option('-r, --room <room>', 'server room')
  .option('-c, --ticaster', 'connect to ticaster')
  .action(compiler);

program.command('bundle')
  .description('prepare a TiShadow bundle without deploying it'.grey)
  .option('-j, --jshint', 'analyse code with JSHint')
  .option('-t, --timestamp <timestamp>', 'set the timestamp (UTC Seconds) in the created bundle manifest')
  .option('-f, --forceUpdate', 'indicate that this update should be forcefully applied when received by a device')
  .action(compiler);

program.command('spec')
  .description('run jasmin spec tests on all connected devices'.grey)
  .option('-u, --update', 'only send recently changed files')
  .option('-l, --locale <locale>', 'set the locale in in the TiShadow app')
  .option('-o, --host <host>', 'server host name / ip address')
  .option('-p, --port <port>', 'server port')
  .option('-r, --room <room>', 'server room')
  .option('-c, --ticaster', 'connect to ticaster')
  .option('-j, --jshint', 'analyse code with JSHint')
  .option('-x, --junit-xml','output report as JUnit XML')
  .option('-P, --platform <platform>', 'target platform')
  .action(compiler);

program.command('close')
  .description('close the running app on the device'.grey)
  .option('-o, --host <host>', 'server host name / ip address')
  .option('-p, --port <port>', 'server port')
  .option('-r, --room <room>', 'server room')
  .option('-c, --ticaster', 'connect to ticaster')
  .option('-P, --platform <platform>', 'target platform')
  .action(api.closeApp);

program.command('test')
  .description('run the test specs within the app on the device (NOTE: This does not clear the cache like "tishadow spec" does'.grey)
  .option('-o, --host <host>', 'server host name / ip address')
  .option('-p, --port <port>', 'server port')
  .option('-r, --room <room>', 'server room')
  .option('-c, --ticaster', 'connect to ticaster')
  .option('-P, --platform <platform>', 'target platform')
  .action(api.test);

program.command('repl')
  .description('launch REPL'.grey)
  .option('-o, --host <host>', 'server host name / ip address')
  .option('-p, --port <port>', 'server port')
  .option('-r, --room <room>', 'server room')
  .option('-c, --ticaster', 'connect to ticaster')
  .option('-P, --platform <platform>', 'target platform')
  .action(api.sendSnippet);

program.command('screenshot')
  .description('close the running app on the device'.grey)
  .option('-o, --host <host>', 'server host name / ip address')
  .option('-p, --port <port>', 'server port')
  .option('-r, --room <room>', 'server room')
  .option('-s, --screencast <interval>', 'screencast mode, interval in ms')
  .option('-x, --scale <ratio>', 'ratio (as decimal) to scale screenshot')
  .option('-P, --platform <platform>', 'target platform')
  .action(api.screenshot);
  
program.command('log')
  .description('tail server logs'.grey)
  .option('-o, --host <host>', 'server host name / ip address')
  .option('-p, --port <port>', 'server port')
  .option('-r, --room <room>', 'server room')
  .option('-c, --ticaster', 'connect to ticaster')
  .action(function(env) {
    config.buildPaths(env, require('./support/socket').connect);
  });

program.command('config')
  .description('set default configuration settings'.grey)
  .option('-o, --host <host>', 'set default server host name / ip address')
  .option('-p, --port <port>', 'set default server port')
  .option('-r, --room <room>', 'set default server room')
  .action(config.write);

program.command('app')
  .description('generate a titanium project with TiShadow app source code'.grey)
  .option('-d, --destination <path>', 'target path for generated project')
  .option('-u, --upgrade', 'upgrade an existing tishadow app')
  .action(function(env) {
    if (env.upgrade) { 
      require('./support/appify').copyCoreProject(env);
    } else {
      program.prompt("Enter app id [com.yydigital.tishadowapp]: ", function(appid) {
        env.appid = appid.trim() || "com.yydigital.tishadowapp";
        require('./support/appify').copyCoreProject(env);
        process.stdin.destroy();
      });
    }
  });

program.command('appify')
  .description('generate an appified TiShadow app'.grey)
  .option('-d, --destination <path>', 'target path for generated project')
  .option('-o, --host <host>', 'set server host name / ip address')
  .option('-p, --port <port>', 'set server port')
  .option('-r, --room <room>', 'set server room')
  .option('-c, --ticaster', 'connect to ticaster')
  .action(require('./support/appify').build);

program.command('carmify')
  .description('generate an Carmified version of your app'.grey)
  .option('-t, --type <type>', 'prod or dev')
  .option('-x, --excludeshadowmodules', 'exclude template tishadow required modules (they must be included in the project being carmified)')
  .option('-d, --destination <path>', 'target path for generated project')
  .option('-o, --host <host>', 'set server host name / ip address')
  .option('-p, --port <port>', 'set server port')
  .option('-r, --room <room>', 'set server room')
  .action(require('./support/appify').build);

program.command('delta')
  .description('create a bundle of the delta between source and target timestamp manifested bundles'.grey)
  .option('-s, --sourcebundlepath <sourcebundlepath>', 'the path to the bundle that represents the source bundle')
  .option('-t, --targetbundlepath <targetbundlepath>', 'the path to the bundle that represents the target bundle')
  .option('-d, --deltabundlepath <deltabundlepath>', 'the output path to create the delta bundle')
  .action(require('./support/delta').delta);


function execute() {
  program.parse(process.argv);
  // Display help on an invalid command
  if (program.args.length === 0 || typeof program.args[program.args.length -1] === 'string'){
    program.help();
  }
}

if (config.isWatching) {
  function watcher(f, curr, prev) {
    if (curr || prev) {
      execute();
    }
  }
  watch.watchTree(config.resources_path,watcher);
  if (fs.existsSync(config.spec_path)) {
    watch.watchTree(config.spec_path,watcher);
  }
} 

execute();

